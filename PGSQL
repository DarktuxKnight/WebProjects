URL : jdbc:postgresql://<IPAddress>:5432/serverdata

Create Database
   CREATE DATABASE serverdata;
   
Create Schema
CREATE SCHEMA ServerSchema;

Create Tables

CREATE TABLE ServerSchema.serverlist(
servername varchar PRIMARY KEY NOT NULL,
domain varchar
);

CREATE TABLE ServerSchema.serverinfo(
   id serial PRIMARY KEY NOTNULL,
   name varchar,
   domain varchar,
   fqdn varchar,
   site varchar,
   ipaddress inet
);

su - postgres
psql
\connect serverdata
List Tables : \l
Show Table details : \d serverschema.serverinfo

Alter Tables

ALTER TABLE ServerSchema.serverinfo ADD COLUMN lastreboot real;
ALTER TABLE ServerSchema.serverinfo 
   ADD CONSTRAINT fk_servername
   FOREIGN KEY (name) 
   REFERENCES ServerSchema.serverlist(servername);
ALTER TABLE ServerSchema.serverinfo ALTER COLUMN ipaddress TYPE varchar;
ALTER TABLE ServerSchema.serverinfo ALTER COLUMN name TYPE varchar;

Instert operation

INSERT INTO serverschema.serverlist(servername,domain) VALUES ('server1','PROD');
INSERT INTO serverschema.serverinfo (name,domain,fqdn,site,ipaddress,lastreboot)
VALUES ('server1','PROD','server1.local','Loc1','10.0.0.1',47);

Select Operations

SELECT ID, name,domain,fqdn,site,ipaddress FROM serverschema.serverinfo;
SELECT ID, name,domain,fqdn,site,ipaddress FROM serverschema.serverinfo WHERE name='server1';
SELECT COUNT(*) AS "RECORDS" FROM serverschema.serverinfo;
SELECT CURRENT_TIMESTAMP;


Update Operation

UPDATE serverschema.serverinfo SET domain = "new' WHERE name = 'serverx';

Delete Operation

DELETE FROM serverschema.serverinfo WHERE name = 'serverx';

Where Operation

SELECT * FROM serverschema.serverinfo WHERE lastreboot >= 30 AND cfree < 5;
SELECT * FROM serverschema.serverinfo WHERE lastreboot >= 30 OR cfree < 5;
SELECT * FROM serverschema.serverinfo WHERE status = 'stopped';

Like Operation

SELECT FROM serverschema.serverinfo
WHERE name LIKE 'serverx'

Limit Operation

SELECT * FROM serverschema.serverinfo LIMIT 10;

Order by

SELECT * FROM serverschema.serverinfo ORDER BY lastreboot DESC;

Group by

SELECT name,rebootedon(lastreboot) FROM serverschema.serverinfo GROUP BY NAME ORDER BY rebootedon DESC;
SELECT column1, column2
FROM table1, table2
WHERE [ conditions ]
GROUP BY column1, column2
HAVING [ conditions ]
ORDER BY column1, column2

Having Operation

SELECT name,lastreboot FROM serverschema.serverinfo GROUP BY name HAVING lastreboot > 1;

Distinct Operation

SELECT DISTINCT name FROM serverschema.serverinfo;

Alias Operation

SELECT name, lastreboot....
FROM serverschema.serverinfo AS rebootneeded
WHERE [lastrebeet > 30];

Trigger Operation

CREATE TRIGGER servertrigger AFTER INSERT ON serverschema.serverlist
FOR EACH ROW EXECUTE PROCEDURE kickbackup();

Function

CREATE OR REPLACE FUNCTION kickbackup() RETURNS TRIGGER AS $example_table$
   BEGIN
      INSERT INTO AUDIT(EMP_ID, ENTRY_DATE) VALUES (new.ID, current_timestamp);
      RETURN NEW;
   END;
$example_table$ LANGUAGE plpgsql;


TRUNCATE TABLE : Removes all data leaves table structure.

TRUNCATE TABLE serverschema.serverinfo;

Creating and viewing Views

CREATE VIEW Server_Reboots AS
SELECT name,lastreboot
FROM  serverschema.serverinfo;

select * from server_reboots;

Transactions examples

BEGIN;
DELETE FROM serverschema.serverinfo WHERE lastreboot = 45;
ROLLBACK;
BEGIN;
DELETE FROM serverschema.serverinfo WHERE lastreboot = 45;
COMMIT;

Sub Queries

SELECT * FROM serverschema.serverinfo WHERE ID IN (SELECT ID FROM serverschema.serverinfo WHERE lastreboot > 30);

INSERT INTO serverschema.serverinfobk
   SELECT * FROM serverschema.serverinfo
   WHERE ID IN (SELECT ID
      FROM serverschema.serverinfo);
      
Priveleges

GRANT ALL ON serverschema.serverinfo TO user1;
GRANT ALL ON server_reboots TO public;
GRANT SELECT ON serverschema.serverinfo TO public;

Temporal Commands

SELECT CURRENT_TIME;
SELECT CURRENT_DATE;
SELECT CURRENT_TIMESTAMP;
SELECT CURRENT_TIMESTAMP(2);
SELECT LOCALTIMESTAMP;

Functions(Stored Procedures): Can be written in SQL,C,python.

CREATE OR REPLACE FUNCTION totalRecords()
RETURNS integer AS $total$
declare
	total integer;
BEGIN
   SELECT count(*) into total FROM serverschema.serverinfo;
   RETURN total;
END;
$total$ LANGUAGE plpgsql;

select totalRecords();


CREATE OR REPLACE FUNCTION totalNonReboots()
RETURNS integer AS $badservers$
declare
	badservers integer;
BEGIN
   SELECT count(*) into badservers FROM serverschema.serverinfo WHERE lastreboot > 20;
   RETURN badservers;
END;
$badservers$ LANGUAGE plpgsql;

select totalNonReboots();

Random Functions

COUNT
MAX
MIN
AVG
SUM


